FORMAT: 1A
HOST: http://cloud.sparkmeter.io/api/v1/

# Sparkmeter
The Sparkmeter API is a service for interacting with the sparkcentral system.

This api follows the jsonapi format published at http://jsonapi.org/

# Group Authentication API
Authentication related resources of the **Authentication API**

**TODO**


# Group Customer API
Customer related resources of the **Customer API**

## List Customers [/customers]

### With Pagination [GET /customers{?page%5Bnumber%5D,page%5Bsize%5D}]
+ Parameters
    + page%5Bnumber%5D: `1` (optional, number)
        Number `page[number]` of page to return.
        + Default: `1`
        
    + page%5Bsize%5D: `1` (optional, number)
        Number `page[size]` of customers to return per page.
        + Default: `10`

+ Response 200 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/customers?page[number]=1&page[size]=1",
            },
            "data": [
                {
                    "type": "customer",
                    "id": "c00000000-0000-0000-0000-00000000001",
                    "attributes": {
                        "code": "72XYZ", 
                        "name": "new customer1-local", 
                        "credit_wallet": 1000,
                        "debt_wallet": 100,
                        "plan_wallet": 500
                    }
                }
            ]
        }

### With Filtering [GET /customers{?filter%5Bcode%5D}]
+ Parameters
    + filter%5Bcode%5D: `72XYZ` (optional, string)
        String `filter[code]` of Customers to return.

+ Response 200 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/customers?filter[code]=72XYZ",
            },
            "data": [
                {
                    "type": "customer",
                    "id": "c00000000-0000-0000-0000-00000000001",
                    "attributes": {
                        "code": "72XYZ", 
                        "name": "new customer1-local", 
                        "credit_wallet": 1000,
                        "debt_wallet": 100,
                        "plan_wallet": 500
                    }
                }
            ]
        }


## Get Customer [/customers/{id}]
Get the Account Balance and other information for a given customer. 

+ Parameters
    + id: `c00000000-0000-0000-0000-00000000001` (required, UUID) 
        UUID `id` of the Customer to perform action with.

### Get customer by id [GET]
+ Response 200 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001",
            },
            "data": {
                "type": "customer",
                "id": "c00000000-0000-0000-0000-00000000001",
                "attributes": {
                    "code": "72XYZ", 
                    "name": "new customer1-local", 
                    "credit_wallet": 1000,
                    "debt_wallet": 100,
                    "plan_wallet": 500
                },
                "relationships": {
                    "meters": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001/relationships/meters",
                            "related": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001/meters"
                        },
                        "data": [
                            { "type": "meter", "id": "100000000-0000-0000-0000-00000000001" },
                            { "type": "meter", "id": "100000000-0000-0000-0000-00000000002" }
                        ]
                    },
                    "transactions": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001/relationships/transactions",
                            "related": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001/transactions"
                        },
                        "data": [
                            { "type": "transaction", "id": "700000000-0000-0000-0000-00000000001" },
                            { "type": "transaction", "id": "700000000-0000-0000-0000-00000000002" }
                        ]
                    }
                }
            }
        }

## Get Customer Transactions [/customers/{id}/transactions{?page%5Bnumber%5D,page%5Bsize%5D}]
List transactions for a customer, optionally limiting to just the last transaction.
This is able to give paginated results of all transactions involving this customer. 
To get only the last transaction, set the page number and size values to 1.

+ Parameters
    + id: `c00000000-0000-0000-0000-00000000001` (required, UUID)
        UUID `id` of the Customer to perform action with.

    + page%5Bnumber%5D: `1` (optional, number)
        Number `page[number]` of page to return.
        + Default: `1`
        
    + page%5Bsize%5D: `1` (optional, number)
        Number `page[size]` of transactions to return per page.
        + Default: `10`
        
### Get Customer Transactions [GET]
+ Response 200 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001/transactions?page%5Bnumber%5D=1&page%5Bsize%5D=1",
            },
            "data": [{
                "type": "transaction",
                "id": "700000000-0000-0000-0000-00000000001",
                "attributes": {
                    "memo": null, 
                    "reference_id": "700000000-0000-0000-0000-00000000002", 
                    "microgrid_id": "e1bd691d-a8b9-4301-944b-a840bf8b798a", 
                    "user_id": "730828b1-5287-4f3e-aeb0-fb0c9d0c8e25", 
                    "to_wallet_id": "6d432138-f1d9-4d73-ac1e-fb10ee54c68e", 
                    "created": "2015-08-11T14:48:34.890886", 
                    "from_wallet_id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74", 
                    "amount": 100.0, 
                    "processed": true, 
                    "error": null, 
                    "source_id": "2927d857-1bf4-4233-bd5e-d900a84b0f39", 
                    "acct_type": "credit", 
                    "external_id": null
                },
                "relationships": {
                    "from": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/vendor/d19d9de4-5676-4c56-82ca-3c1bafbb1c74"
                        },
                        "data": { "type": "vendor", "id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74" }
                    },
                    "to": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001"
                        },
                        "data": { "type": "customer", "id": "c00000000-0000-0000-0000-00000000001" }
                    },
                    "reference_transaction": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/transactions/700000000-0000-0000-0000-00000000002",
                        },
                        "data": { "type": "transaction", "id": "700000000-0000-0000-0000-00000000002" }
                    }
                },
                "links": {
                    "self": "http://cloud.sparkmeter.io/api/v1/transactions/700000000-0000-0000-0000-00000000001"
                }]
            }
        }

# Group Transaction API
Transaction related resources of the **Transaction API**

## Create Transaction [/transactions]

### Create Transaction [POST]
+ Request (application/vnd.api+json)

        {
            "data": {
                "type": "transaction",
                "attributes": {
                    "memo": null, 
                    "microgrid_id": "e1bd691d-a8b9-4301-944b-a840bf8b798a", 
                    "amount": 100.0, 
                    "source_id": "2927d857-1bf4-4233-bd5e-d900a84b0f39", 
                    "acct_type": "credit", 
                    "external_id": null, 
                },
                "relationships": {
                    "from": {
                        "data": { "type": "vendor", "id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74" }
                    },
                    "to": {
                        "data": { "type": "customer", "id": "c00000000-0000-0000-0000-00000000001" }
                    }
                }
            }
        }

+ Response 201 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/transactions/700000000-0000-0000-0000-00000000001",
            },
            "data": {
                "type": "transaction",
                "id": "700000000-0000-0000-0000-00000000001",
                "attributes": {
                    "memo": null, 
                    "reference_id": "700000000-0000-0000-0000-00000000002", 
                    "microgrid_id": "e1bd691d-a8b9-4301-944b-a840bf8b798a", 
                    "user_id": "730828b1-5287-4f3e-aeb0-fb0c9d0c8e25", 
                    "to_wallet_id": "6d432138-f1d9-4d73-ac1e-fb10ee54c68e", 
                    "created": "2015-08-11T14:48:34.890886", 
                    "from_wallet_id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74", 
                    "amount": 100.0, 
                    "processed": true, 
                    "error": null, 
                    "source_id": "2927d857-1bf4-4233-bd5e-d900a84b0f39", 
                    "acct_type": "credit", 
                    "external_id": null, 
                },
                "relationships": {
                    "from": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/vendor/d19d9de4-5676-4c56-82ca-3c1bafbb1c74"
                        },
                        "data": { "type": "vendor", "id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74" }
                    },
                    "to": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001"
                        },
                        "data": { "type": "customer", "id": "c00000000-0000-0000-0000-00000000001" }
                    },
                    "reference_transaction": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/transactions/700000000-0000-0000-0000-00000000002",
                        },
                        "data": { "type": "transaction", "id": "700000000-0000-0000-0000-00000000002" }
                    }
                }
            }
        }
        
## Get Transaction [/transactions/{id}]
Status of specific transaction
 
+ Parameters
    + id: `700000000-0000-0000-0000-00000000001` (required, UUID)
        UUID `id` of the Transaction to perform action with.

### Get Transaction by id  [GET]
+ Response 200 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/transactions/700000000-0000-0000-0000-00000000001",
            },
            "data": {
                "type": "transaction",
                "id": "700000000-0000-0000-0000-00000000001",
                "attributes": {
                    "memo": null, 
                    "reference_id": "700000000-0000-0000-0000-00000000002", 
                    "microgrid_id": "e1bd691d-a8b9-4301-944b-a840bf8b798a", 
                    "user_id": "730828b1-5287-4f3e-aeb0-fb0c9d0c8e25", 
                    "to_wallet_id": "6d432138-f1d9-4d73-ac1e-fb10ee54c68e", 
                    "created": "2015-08-11T14:48:34.890886", 
                    "from_wallet_id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74", 
                    "amount": 100.0, 
                    "processed": true, 
                    "error": null, 
                    "source_id": "2927d857-1bf4-4233-bd5e-d900a84b0f39", 
                    "acct_type": "credit", 
                    "external_id": null
                },
                "relationships": {
                    "from": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/vendor/d19d9de4-5676-4c56-82ca-3c1bafbb1c74"
                        },
                        "data": { "type": "vendor", "id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74" }
                    },
                    "to": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001"
                        },
                        "data": { "type": "customer", "id": "c00000000-0000-0000-0000-00000000001" }
                    },
                    "reference_transaction": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/transactions/700000000-0000-0000-0000-00000000002",
                        },
                        "data": { "type": "transaction", "id": "700000000-0000-0000-0000-00000000002" }
                    }
                }
            }
        }


# Group Meter API
Meters related resources of the **Meter API**

## Get Meter [/meters/{id}]
Get the meter status and other information for a given meter. 

+ Parameters
    + id: `100000000-0000-0000-0000-00000000001` (required, UUID)
        UUID `id` of the Meter to perform action with.

### Get Meter by id  [GET]
+ Response 200 (application/vnd.api+json)

        {
            "links": {
                "self": "http://cloud.sparkmeter.io/api/v1/meters/100000000-0000-0000-0000-00000000001",
            },
            "data": {
                "type": "meter",
                "id": "100000000-0000-0000-0000-00000000001",
                "attributes": {
                    "code": 666, 
                    "customer_id": "c00000000-0000-0000-0000-00000000001", 
                    "microgrid_id": "e1bd691d-a8b9-4301-944b-a840bf8b798a", 
                    "packet_request": 0, 
                    "packet_response": 0, 
                    "reading_id": null, 
                    "bootloader": null, 
                    "last_plan_payment_date": null, 
                    "last_energy_datetime": "2015-07-30T15:24:29.857164", 
                    "firmware": null, 
                    "current_state": 0, 
                    "is_running_plan": false, 
                    "last_energy": 0.0, 
                    "last_cycle_start": null, 
                    "total_cycle_energy": 0.0, 
                    "subnet": 1, 
                    "tariff_id": "3acd9ad9-2ed9-4006-84b7-2d95526a1ba0", 
                    "state": 0, 
                    "hidden": true, 
                    "city": "", 
                    "street1": "", 
                    "street2": "", 
                    "state": "", 
                    "coords": null, 
                    "country": "", 
                    "postalcode": "", 
                },
                "relationships": {
                    "readings": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/meters/100000000-0000-0000-0000-00000000001/relationships/readings",
                            "related": "http://cloud.sparkmeter.io/api/v1/meters/100000000-0000-0000-0000-00000000001/readings"
                        },
                        "data": [
                            { "type": "reading", "id": "300000000-0000-0000-0000-00000000001" },
                            { "type": "reading", "id": "300000000-0000-0000-0000-00000000002" }
                        ]
                    },
                    "customer": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/customers/c00000000-0000-0000-0000-00000000001"
                        },
                        "data": { "type": "customer", "id": "c00000000-0000-0000-0000-00000000001" }
                    },
                    "tariff": {
                        "links": {
                            "self": "http://cloud.sparkmeter.io/api/v1/tariffs/400000000-0000-0000-0000-00000000001"
                        },
                        "data": { "type": "tariff", "id": "400000000-0000-0000-0000-00000000001" }
                    }
                }
            }
        }


# Group Sales Account API
Sales Account related resources of the **Sales Account API**

## Get Sales Account [/sales_account/{id}]
### Get Sales Account by id [GET]
+ Response 200 (application/vnd.api+json)

        TODO

## Get Sales Account Transactions [/sales_account/{id}/transactions{?page%5Bnumber%5D,page%5Bsize%5D}]
List transactions created by this Sales Account, optionally limiting to just the last transaction.
This is able to give paginated results of all transactions to or from by this Sales Account. 
To get only the last transaction, set the page number and size values to 1.

+ Parameters
    + id: `c00000000-0000-0000-0000-00000000001` (required, UUID)
        UUID `id` of the Sales Account to perform action with.

    + page%5Bnumber%5D: `1` (optional, number)
        Number `page[number]` of page to return.
        + Default: `1`
        
    + page%5Bsize%5D: `1` (optional, number)
        Number `page[size]` of transactions to return per page.
        + Default: `10`
        
### Get Sales Account Transactions [GET]
+ Response 200 (application/vnd.api+json)

        TODO

# Group User API
User related resources of the **User API**

**Maybe V2?**


## Get User [/users/{id}]
### Get User [GET]
+ Response 200 (application/vnd.api+json)

        TODO

## Get User Transactions [/users/{id}/transactions{?page%5Bnumber%5D,page%5Bsize%5D}]
List transactions created by this user, optionally limiting to just the last transaction.
This is able to give paginated results of all transactions created by this user. 
To get only the last transaction, set the page number and size values to 1.

+ Parameters
    + id: `c00000000-0000-0000-0000-00000000001` (required, UUID)
        UUID `id` of the User to perform action with.

    + page%5Bnumber%5D: `1` (optional, number)
        Number `page[number]` of page to return.
        + Default: `1`
        
    + page%5Bsize%5D: `1` (optional, number)
        Number `page[size]` of transactions to return per page.
        + Default: `10`
        
### Get User Transactions [GET]
+ Response 200 (application/vnd.api+json)

        TODO

# Group Tariff API
Tariff related resources of the **Tariff API**

**TODO V2?**

# Group Reading API
Reading related resources of the **Reading API**

**TODO V2?**

# Group Microgrid API
Microgrid related resources of the **Microgrid API**

**TODO V2?**
